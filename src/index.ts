import {
  app,
  BrowserWindow,
  globalShortcut,
  ipcMain,
  Menu,
  MenuItem,
  screen,
} from "electron";
import {
  configuration,
  runPythonExeInDevMode,
  TRACKING_STATUS,
  updateConfiguration,
} from "./config/config";
import { IPC_FUNCTION_KEYS } from "./constants/ipcFunctionKeys";
import { startServer } from "./server/server";
import * as path from "path";
import { create } from "@mui/material/styles/createTransitions";
const log = require("electron-log");
const isDev = require("electron-is-dev"); //whether elctron is running in prod or dev mode

const { exec, spawn } = require("node:child_process");
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
const TAG = "index.ts ";
// export var configuration = defaultConfiguration;
// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}
export let mainWindow: BrowserWindow;

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 900,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      webviewTag: true,
    },
  });

  // and load the index.html of the app.
  console.log("MAIN_WINDOW_WEBPACK_ENTRY, ", MAIN_WINDOW_WEBPACK_ENTRY);

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if (isDev) {
    // Open the DevTools.
    mainWindow.webContents.openDevTools();
  }
};

const turnOffTracking = () => {
  //console.log("Turned off tracking!");
  configuration.trackingStatus = TRACKING_STATUS.OFF;
  mainWindow.webContents.send(
    IPC_FUNCTION_KEYS.HANDLE_CONFIGURATION_UPDATE,
    configuration
  );
};

const createMenu = (): void => {
  const menu = new Menu();
  menu.append(
    new MenuItem({
      label: "Start/Stop",
      submenu: [
        {
          label: "Start tracking",
          accelerator: "Return",
          click: () => {
            console.log("Turned on tracking!");
            configuration.trackingStatus = TRACKING_STATUS.ON;
            configuration.mousePositionSequence = [];
            mainWindow.webContents.send(
              IPC_FUNCTION_KEYS.HANDLE_CONFIGURATION_UPDATE,
              configuration
            );
          },
        },
        {
          label: "Stop tracking",
          accelerator: "Escape",
          click: () => {
            turnOffTracking();
          },
        },
        {
          label: "Global stop tracking",
          accelerator: "Alt+CommandOrControl+S",
        },
         {
          label: "Quit",
          accelerator: "CommandOrControl+Q",
          click: () => {
            if (process.platform == "darwin") {
              app.quit();
            }
            
          },
        },
      ],
    })
  );
  Menu.setApplicationMenu(menu);
};

createMenu();

//Log session
log.info("New session. isDev= ", isDev);
log.info("process.resourcesPath", path.join(process.resourcesPath, "main.exe"));
log.info("dirname path", path.join(__dirname, "../../../main"));

let pyProc: any = null;

//spawns python tracker as a sub process
function startPyTracker() {
  let pathToPyMain = path.join(__dirname, "../../src/pyTracker/src", "main.py");
  console.log("script path", pathToPyMain);

  //Finds python exe in macOS build. looks into Contents/Resources folder in macOS .app file
  // const pythonExecutablePathInProd = path.join(__dirname, "..\\..\\..\\main");
  //Finds python exe in a squirrel windows build
  const pythonExecutablePathInProd = path.join(
    process.resourcesPath,
    "dist/main.exe"
  );
  let pythonExecutablePath = path.join(
    __dirname,
    "../../src/pyTracker/dist/main"
  );

  if (isDev && !runPythonExeInDevMode) {
    // // run tracker from python code
    console.log("pythonExecutablePath", pythonExecutablePath);
    //note that the name of the virtual environment (.venv) is hardcoded here
    const pathToPyVenv = path.join(
      __dirname,
      "../../src/pyTracker",
      ".venv/bin/python"
    );
    var scriptToExecTracker = pathToPyVenv + " " + pathToPyMain;
    if (process.platform === "win32") {
      // script to start python from code on windows
      const scriptToExecTrackerWindows =
        path.join(
          __dirname,
          "../../src/pyTracker",
          ".venv/Scripts/python.exe"
        ) +
        " " +
        pathToPyMain;
      scriptToExecTracker = scriptToExecTrackerWindows;
    }
    console.log("scriptToExecTracker", scriptToExecTracker);
    pyProc = exec(
      scriptToExecTracker,
      (error: any, stdout: any, stderr: any) => {
        if (error) {
          console.log(" Could not run python code. Error", error);
        }
        console.log("\nstdout", stdout);
        console.log("\nstderr", stderr);
      }
    );
  } else {
    if (!isDev) {
      pythonExecutablePath = pythonExecutablePathInProd;
    }

    console.log("path to python .exe", pythonExecutablePath);
    log.info("path to python .exe", pythonExecutablePath);

    // script to start python from code on windows
    const scriptToExecTrackerWindows =
      path.join(__dirname, "../../src/pyTracker", ".venv/Scripts/python.exe") +
      " " +
      pythonExecutablePath;
    scriptToExecTracker = scriptToExecTrackerWindows;

    //run tracker from python executable
    pyProc = exec(
      pythonExecutablePath,
      (error: any, stdout: any, stderr: any) => {
        if (error) {
          log.info("Could not open python executable. Error ", error);
          console.log("Could not open python executable. Error ", error);
        }
        log.info("\nstdout", stdout);
        log.info("\nstderr", stderr);
        console.log("\nstdout", stdout);
        console.log("\nstderr", stderr);
      }
    );
  }
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(async () => {
  //expose functions to UI
  ipcMain.on(
    IPC_FUNCTION_KEYS.UPDATE_APP_CONFIGURATION,
    (_, newConfiguration: typeof configuration) => {
      updateConfiguration(newConfiguration);
    }
  );

  //register global short cut to exit tracking
  globalShortcut.register("Alt+CommandOrControl+S", () => {
    turnOffTracking();
  });

  //detect and set screen size
  const taskBarHeight = 90;
  const primaryDisplay = screen.getPrimaryDisplay();
  const { width, height } = primaryDisplay.workAreaSize;
  let scaleFactor = 1;
  if (process.platform !== "darwin") {
    scaleFactor = primaryDisplay.scaleFactor;
  }
  configuration.screenWidth = width * scaleFactor;
  configuration.screenHeight = height * scaleFactor + taskBarHeight;
  console.log(
    TAG,
    "set screen size to width:",
    configuration.screenWidth,
    "height:",
    configuration.screenHeight,
    "used scalefactor of",
    scaleFactor
  );

  createWindow();
  startServer();
  startPyTracker();

  const fs = require('fs/promises');

  /* Create log files */
  async function createFile(filename: string) {
    try {
      const content = '';
      await fs.writeFile(filename, content);
    } catch (err) {
      console.log(err);
    }
  }
  // createFile in the app path
  console.log("1" + app.getPath("userData"));
  createFile(app.getPath("desktop") + "/movement_log.txt");
  createFile(app.getPath("desktop") + "/tracking_log.txt");
  
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// close python sub process before app is closed
app.on("before-quit", (event) => {
  if (!configuration.isShuttingDown) {
    event.preventDefault();
    configuration.isShuttingDown = true;
    setTimeout(() => {
      app.quit();
    }, 700);
  }
});

//required for ts to recognize ipc functions in react code
declare global {
  interface Window {
    electronAPI?: {
      openSettings: () => void;
      handleConfigurationUpdate: (configuration: any) => void;
      updateConfiguration: (configuration: any) => void;
    };
  }
}
